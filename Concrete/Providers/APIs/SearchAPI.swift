//
// SearchAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class SearchAPI: APIBase {
    /**
     Search repositories
     
     - parameter q: (query) query 
     - parameter sort: (query) sort (optional)
     - parameter page: (query) page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func searchRepositoriesGet(q: String, sort: String? = nil, page: Int32? = nil, completion: @escaping ((_ data: ResultResponse?,_ error: Error?) -> Void)) {
        searchRepositoriesGetWithRequestBuilder(q: q, sort: sort, page: page).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Search repositories
     - GET /search/repositories
     - Search repositories
     - examples: [{contentType=application/json, example={
  "total_count" : 2000,
  "items" : [ {
    "owner" : {
      "avatar_url" : "https://avatars2.githubusercontent.com/u/6407041?v=3",
      "id" : 1,
      "login" : "ReactiveX"
    },
    "full_name" : "ReactiveX/RxJava",
    "stargazers_count" : 2000,
    "name" : "RxJava",
    "description" : "RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.",
    "id" : 1,
    "forks_count" : 2000
  } ]
}}]
     
     - parameter q: (query) query 
     - parameter sort: (query) sort (optional)
     - parameter page: (query) page (optional)

     - returns: RequestBuilder<ResultResponse> 
     */
    open func searchRepositoriesGetWithRequestBuilder(q: String, sort: String? = nil, page: Int32? = nil) -> RequestBuilder<ResultResponse> {
        let path = "/search/repositories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "q": q, 
            "sort": sort, 
            "page": page?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<ResultResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
